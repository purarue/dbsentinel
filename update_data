#!/usr/bin/env bash

THIS_DIR="$(realpath "$(dirname "${BASH_SOURCE[0]}")")"
cd "${THIS_DIR}" || exit $?

set -o pipefail

havecmd() {
	local BINARY ERRMSG
	BINARY="${1:?Must provide command to check}"
	command -v "${BINARY}" >/dev/null 2>&1 && return 0
	ERRMSG="requires '${BINARY}', could not find that on your \$PATH"
	[[ -n "$2" ]] && ERRMSG="${ERRMSG}. $2"
	printf '%s\n' "${ERRMSG}" 1>&2
	return 1
}

set -e
havecmd evry "Install with 'cargo install evry'"
havecmd wait-for-internet "Install with 'cargo install wait-for-internet'"

readonly REPO='https://github.com/seanbreckenridge/mal-id-cache'
readonly REPO_TARGET='./data/mal-id-cache'
readonly HASH_FILE='./data/hash'

readonly ARM_REPO_URL='https://github.com/kawaiioverflow/arm'
ARM_REPO='./data/arm'

in_env() {
	.venv/bin/python "$@"
}

# if running local, sync from remote server
[[ -n "$ON_OS" ]] && wait-for-internet --text 'syncing from server...' && evry 1d -dev-sync-dsentinel-from-remote && {
	./scripts/sync_from_remote
	rm -vrf ./data/hash
}

git_hash_changed() {
	local ret git_hash
	ret=1
	cd "${REPO_TARGET}" || exit $?
	git_hash="$(git rev-parse --short HEAD)"
	echo "Git hash: ${git_hash}" 1>&2
	cd "$THIS_DIR" || exit $?
	# file exists
	if [[ -f "${HASH_FILE}" ]]; then
		# file existed, but hash has changed
		if [[ "${git_hash}" != "$(cat "${HASH_FILE}")" ]]; then
			echo 'Git hash changed, updating linear history...' >&2
			ret=0
			echo "${git_hash}" >"${HASH_FILE}"
		else
			echo 'Hash unchanged, not updating linear history...' >&2
		fi
	else
		# file didn't exist, create it
		echo 'Hash not found, creating linear history...' >&2
		echo "${git_hash}" >"${HASH_FILE}"
		ret=0
	fi
	return "${ret}"
}

update_arm() {
	[[ -d "${ARM_REPO}" ]] || git clone "${ARM_REPO_URL}" "${ARM_REPO}"
	(
		cd "${ARM_REPO}" || return $?
		git pull
	)
}

run_in_venv() {
	.venv/bin/python
}

iter() {
	printf '[%s] Updating... \n' "$(date)"
	printf '[%s] Updating... \n' "$(date)" >&2
	[[ ! -e './data' ]] && mkdir ./data
	# update_arm || true
	[[ -e "$REPO_TARGET" ]] || git clone "$REPO" "$REPO_TARGET"
	(cd "$REPO_TARGET" && git pull)
	if git_hash_changed; then
		in_env main.py mal linear-history >'./data/data.jsonl' || exit $?
		in_env main.py mal clean-linear-history || exit $?
	fi
	set -x
	set +e
	if ! in_env main.py mal check-mal; then
		echo 'mal is down, skipping updates...'
		return 1
	fi
	if [[ -z "$SKIP_UPDATE_METADATA" ]]; then
		if wait-for-internet --text 'checking for internet....' --timeout 1; then
			# just use evry to track when this last ran
			evry 1s -update-metadata && in_env main.py mal update-metadata || return $?
		fi
	fi
	if curl -s localhost:4001 >/dev/null; then
		evry 30 minutes -dbsentinel-user-estimate && {
			in_env main.py mal estimate-user-recent ./usernames.txt --request --timid || return $?
		}
		evry 6 hours -dbsentinel-delete-estimate && {
			in_env main.py mal estimate-deleted-animelist-xml --request --timid || return $?
		}
	fi
	evry 1 hour -dbsentinel-full-db-update && {
		local -a args=()
		[[ -n "$RCOUNT" ]] && args+=('--rerequest-oldest' "$RCOUNT")
		in_env main.py mal full-db-update "${args[@]}" || return $?
	}
	set -e
	set +x
	true
}

main() {
	iter
	# if loop, then run this once a minute
	if [[ "$1" == '-l' ]]; then
		while true; do
			sleep 10m
			iter || true
		done
	fi
}

main "$@" || exit $?
